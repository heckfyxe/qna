.question
  p#question-id class='d-none' = question.id
  h1= question.title
  - if can? :create, Subscription
    = question_subscribe_link('Subscribe', true, question, !question.subscribed_by?(current_user))
    = question_subscribe_link('Unsubscribe', false, question, question.subscribed_by?(current_user))
  p#question-rating= "Rating: #{question.rating}"
  - if can? :vote, question
    = question_vote_link('Vote up', true, question, question.user_vote(current_user) < 1)
    =< question_vote_link('Vote down', false, question, question.user_vote(current_user) > -1)
  p= question.body

  - if question.files.attached?
    - question.files.each do |file|
      p id="file-#{file.id}"
        = link_to file.filename.to_s, url_for(file)
        - if can? :update, file.record
          =< link_to 'Delete', file_path(file.id), method: :delete, remote: true

  - if question.links.present?
    .links
      p Links:
      ul
        = render question.links

  - if question.badge
    p Badge for the best answer:
    = render question.badge

  p
  h2= 'Comments'
  .question-comments
    = render question.comments
  - if can? :create, Comment
    .question-comment-errors
    = form_with model: [question, Comment.new], class: 'new-question-comment' do |f|
      = f.label :body
      = f.text_field :body
      = f.submit 'Comment'

br

h2 Answers
.answers
  = render @answers

- if can? :create, Answer
  .answer-errors
    = render 'shared/errors', resource: @answer

  = form_with model: [question, @answer], class: 'new-answer', data: { type: :json } do |f|
    = render 'answers/answer_fields', f: f

    p = f.submit 'To answer'